const Profile = require("../schemas/v1/profile.schema");
const User = require("../schemas/v1/user.schema");
const { isValidObjectId } = require("mongoose");
const { uploadImage } = require("../controllers/fileUploadControllers");
const multer = require('multer') // ‚úÖ ‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏û‡∏¥‡πà‡∏° multer ‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πà

const uaParser = require('ua-parser-js');
const geoip = require('geoip-lite');
// üìå ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÅ‡∏õ‡∏•‡∏á Binary ‡πÄ‡∏õ‡πá‡∏ô Base64 URL
const getBase64Image = (profileImage) => {
  if (!profileImage || !profileImage.data) return null;
  return `data:${profileImage.contentType};base64,${profileImage.data.toString("base64")}`;
};

// üìå ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå ‡∏û‡∏£‡πâ‡∏≠‡∏° `email` ‡πÅ‡∏•‡∏∞ `phone` ‡∏à‡∏≤‡∏Å `User`
exports.getProfile = async (req, res) => {
  try {
    const userId = req.user.userId;

    // ‚úÖ `populate("user")` ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏∂‡∏á `email` ‡πÅ‡∏•‡∏∞ `phone`
    const profile = await Profile.findOne({ user: userId }).populate("user");

    if (!profile) {
      return res.status(404).json({ status: "error", message: "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå" });
    }

    console.log("üìå Debug User Data:", profile.user);

    res.status(200).json({
      status: "success",
      data: {
        name: profile.name,
        email: profile.user?.user?.email || "‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏≠‡∏µ‡πÄ‡∏°‡∏•",  // ‚úÖ ‡∏î‡∏∂‡∏á `email` ‡∏à‡∏≤‡∏Å `user.user.email`
        phone: profile.user?.user?.phone || "‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£",  // ‚úÖ ‡∏î‡∏∂‡∏á `phone` ‡∏à‡∏≤‡∏Å `user.user.phone`
        address: profile.address || "‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏",
        profileImage: getBase64Image(profile.profileImage),
        createdAt: profile.createdAt
      }
    });
  } catch (err) {
    console.error("‚ùå Error in getProfile:", err);
    res.status(500).json({ status: "error", message: err.message });
  }
};


// üìå ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå
exports.updateProfile = async (req, res) => {
  try {
    const userId = req.user.userId;
    const { name, phone, address } = req.body;

    // üîπ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô Profile
    const profile = await Profile.findOneAndUpdate(
      { user: userId }, 
      { name, phone, address }, 
      { new: true }
    );

    if (!profile) {
      return res.status(404).json({ status: "error", message: "‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå" });
    }

    // üîπ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô User
    const user = await User.findByIdAndUpdate(
      userId,
      { "user.name": name, "user.phone": phone }, 
      { new: true }
    );

    res.status(200).json({ status: "success", data: { profile, user } });
  } catch (err) {
    res.status(500).json({ status: "error", message: err.message });
  }
};


// üìå ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå‡∏î‡πâ‡∏ß‡∏¢ `multer`
const storage = multer.diskStorage({
  destination: (req, file, cb) => {
    cb(null, 'public/uploads/') // ‚úÖ ‡πÄ‡∏Å‡πá‡∏ö‡πÑ‡∏ü‡∏•‡πå‡πÉ‡∏ô‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå `public/uploads/`
  },
  filename: (req, file, cb) => {
    cb(null, file.fieldname + '-' + Date.now() + path.extname(file.originalname))
  }
})

const upload = multer({ storage })

// üìå ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå
exports.uploadProfileImage = async (req, res) => {
  try {
    console.log("üì∏ Uploading Image for User:", req.user);
    console.log("üîç File Received:", req.file); // ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö

    if (!req.file) {
      return res.status(400).json({ status: "fail", message: "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û" });
    }

    const userId = req.user.userId;
    let profile = await Profile.findOne({ user: userId });

    if (!profile) {
      return res.status(404).json({ status: "fail", message: "Profile not found" });
    }

    console.log("üõ† Debug: Updating profile image...");

    // ‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏ü‡∏•‡πå‡∏†‡∏≤‡∏û‡∏•‡∏á‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• MongoDB
    profile.profileImage = {
      data: Buffer.from(req.file.buffer), // ‚úÖ ‡πÅ‡∏õ‡∏•‡∏á buffer ‡∏Å‡πà‡∏≠‡∏ô‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å
      contentType: req.file.mimetype
    };

    await profile.save();

    console.log("‚úÖ Image Uploaded Successfully");
    res.json({ status: "success", message: "‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!" });
  } catch (error) {
    console.error("üö® Upload Error:", error);
    res.status(500).json({ status: "error", message: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û" });
  }
};

// üìå ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö
exports.recordLoginHistory = async (req, userId) => {
  try {
    const profile = await Profile.findOne({ user: userId });

    if (!profile) {
      return;
    }

    // üìå ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå, OS, Browser ‡πÅ‡∏•‡∏∞‡∏ó‡∏µ‡πà‡∏ï‡∏±‡πâ‡∏á
    const userAgent = uaParser(req.headers["user-agent"]);
    const ip = req.headers["x-forwarded-for"] || req.connection.remoteAddress;
    const geo = geoip.lookup(ip) || {};

    // üìå ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö
    const loginEntry = {
      ipAddress: ip,
      userAgent: req.headers["user-agent"],
      device: `${userAgent.device.vendor || "Unknown"} ${userAgent.device.model || ""}`,
      os: `${userAgent.os.name} ${userAgent.os.version}`,
      browser: `${userAgent.browser.name} ${userAgent.browser.version}`,
      location: `${geo.city || "Unknown"}, ${geo.country || "Unknown"}`,
      timestamp: new Date(),
    };

    // üìå ‡∏à‡∏≥‡∏Å‡∏±‡∏î‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡πÉ‡∏´‡πâ‡πÄ‡∏Å‡πá‡∏ö 10 ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£
    profile.loginHistory.unshift(loginEntry);
    if (profile.loginHistory.length > 10) {
      profile.loginHistory.pop();
    }

    await profile.save();
  } catch (err) {
    console.error("Error recording login history:", err);
  }
};

// üìå ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö
exports.getLoginHistory = async (req, res) => {
  try {
    const userId = req.user?.userId;
    if (!userId) {
      return res.status(401).json({ status: "error", message: "Unauthorized: ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö" });
    }

    const profile = await Profile.findOne({ user: userId });

    if (!profile) {
      return res.status(404).json({ status: "error", message: "‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ" });
    }

    return res.status(200).json({ 
      status: "success", 
      data: { loginHistory: profile.loginHistory || [] } 
    });

  } catch (err) {
    console.error("üö® getLoginHistory Error:", err);
    res.status(500).json({ status: "error", message: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•" });
  }
};