const cron = require("node-cron");
const { endAuctions } = require("./controllers/auctionController");

cron.schedule("* * * * *", async () => {
  console.log("Checking expired auctions...");
  await endAuctions();
});

const checkPaymentStatus = async () => {
  console.log("üîÑ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡∏ä‡∏ô‡∏∞...");

  try {
    const overdueAuctions = await Auction.find({
      paymentDeadline: { $lte: new Date() },
      status: "ended",
      finalPrice: { $ne: null },
    }).populate("bids");

    for (const auction of overdueAuctions) {
      const allBids = await Bid.find({ auction: auction._id }).sort({ amount: -1 });

      if (allBids.length > 1) {
        const nextBidder = allBids[1]; // üìå ‡∏ú‡∏π‡πâ‡∏ö‡∏¥‡∏î‡∏≠‡∏±‡∏ô‡∏î‡∏±‡∏ö‡∏ñ‡∏±‡∏î‡πÑ‡∏õ
        const nextBidderEmail = await User.findById(nextBidder.user).select("email");

        if (nextBidderEmail) {
          console.log(`üì¢ ‡∏™‡πà‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏ú‡∏π‡πâ‡∏ö‡∏¥‡∏î‡∏Ñ‡∏ô‡∏ñ‡∏±‡∏î‡πÑ‡∏õ: ${nextBidderEmail.email}`);
          await sendNextWinnerEmail(nextBidderEmail.email, auction.name, nextBidder.amount);

          auction.highestBidder = nextBidder.user;
          auction.highestBidderEmail = nextBidderEmail.email;
          auction.finalPrice = nextBidder.amount;
          auction.paymentDeadline = new Date(Date.now() + 24 * 60 * 60 * 1000); // ‚úÖ ‡πÉ‡∏´‡πâ‡πÄ‡∏ß‡∏•‡∏≤ 24 ‡∏ä‡∏°.
          await auction.save();
        }
      } else {
        console.log(`‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ú‡∏π‡πâ‡∏ö‡∏¥‡∏î‡∏Ñ‡∏ô‡∏ñ‡∏±‡∏î‡πÑ‡∏õ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö ${auction.name}`);
      }
    }
  } catch (error) {
    console.error("‚ùå Error checking payments:", error);
  }
};

// ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ó‡∏∏‡∏Å 1 ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á
setInterval(checkPaymentStatus, 60 * 60 * 1000);
